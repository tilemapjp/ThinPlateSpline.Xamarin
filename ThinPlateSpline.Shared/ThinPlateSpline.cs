//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TilemapJP {

public class ThinPlateSpline : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ThinPlateSpline(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ThinPlateSpline obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ThinPlateSpline() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ThinPlateSplineConstPINVOKE.delete_ThinPlateSpline(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ThinPlateSpline(int nof_vars) : this(ThinPlateSplineConstPINVOKE.new_ThinPlateSpline__SWIG_0(nof_vars), true) {
  }

  public ThinPlateSpline() : this(ThinPlateSplineConstPINVOKE.new_ThinPlateSpline__SWIG_1(), true) {
  }

  public int get_nof_points() {
    int ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_get_nof_points(swigCPtr);
    return ret;
  }

  public static int get_object_size() {
    int ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_get_object_size();
    return ret;
  }

  public void set_toler(double tx, double ty) {
    ThinPlateSplineConstPINVOKE.ThinPlateSpline_set_toler(swigCPtr, tx, ty);
  }

  public void get_toler(SWIGTYPE_p_double tx, SWIGTYPE_p_double ty) {
    ThinPlateSplineConstPINVOKE.ThinPlateSpline_get_toler(swigCPtr, SWIGTYPE_p_double.getCPtr(tx), SWIGTYPE_p_double.getCPtr(ty));
    if (ThinPlateSplineConstPINVOKE.SWIGPendingException.Pending) throw ThinPlateSplineConstPINVOKE.SWIGPendingException.Retrieve();
  }

  public ThinPlateSplineInterType get_interpolation_type() {
    ThinPlateSplineInterType ret = (ThinPlateSplineInterType)ThinPlateSplineConstPINVOKE.ThinPlateSpline_get_interpolation_type(swigCPtr);
    return ret;
  }

  public void dump_data_points() {
    ThinPlateSplineConstPINVOKE.ThinPlateSpline_dump_data_points(swigCPtr);
  }

  public int delete_list() {
    int ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_delete_list(swigCPtr);
    return ret;
  }

  public void grow_points() {
    ThinPlateSplineConstPINVOKE.ThinPlateSpline_grow_points(swigCPtr);
  }

  public int add_point(double Px, double Py, SWIGTYPE_p_double Pvars) {
    int ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_add_point(swigCPtr, Px, Py, SWIGTYPE_p_double.getCPtr(Pvars));
    return ret;
  }

  public int delete_point(double Px, double Py) {
    int ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_delete_point(swigCPtr, Px, Py);
    return ret;
  }

  public int get_point(double Px, double Py, SWIGTYPE_p_double Pvars) {
    int ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_get_point(swigCPtr, Px, Py, SWIGTYPE_p_double.getCPtr(Pvars));
    return ret;
  }

  public bool get_xy(int index, SWIGTYPE_p_double x, SWIGTYPE_p_double y) {
    bool ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_get_xy(swigCPtr, index, SWIGTYPE_p_double.getCPtr(x), SWIGTYPE_p_double.getCPtr(y));
    if (ThinPlateSplineConstPINVOKE.SWIGPendingException.Pending) throw ThinPlateSplineConstPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool change_point(int index, double x, double y, SWIGTYPE_p_double Pvars) {
    bool ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_change_point(swigCPtr, index, x, y, SWIGTYPE_p_double.getCPtr(Pvars));
    return ret;
  }

  public void reset() {
    ThinPlateSplineConstPINVOKE.ThinPlateSpline_reset(swigCPtr);
  }

  public int solve() {
    int ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_solve(swigCPtr);
    return ret;
  }

  public int serialize_size() {
    int ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_serialize_size(swigCPtr);
    return ret;
  }

  public string serialize(string serial) {
    string ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_serialize(swigCPtr, serial);
    return ret;
  }

  public string deserialize(string serial) {
    string ret = ThinPlateSplineConstPINVOKE.ThinPlateSpline_deserialize(swigCPtr, serial);
    return ret;
  }

}

}
